export interface SimpleInMemoryCache<T> {
    get: (key: string) => T | undefined;
    set: (key: string, value: T, options?: {
        secondsUntilExpiration?: number;
    }) => void;
    keys: () => string[];
}
export interface SimpleInMemoryCacheState<T> {
    [index: string]: {
        value: T;
        expiresAtMse: number;
    };
}
export declare const createCache: <T>({ seconds, defaultSecondsUntilExpiration: defaultSecondsUntilExpirationInput, }?: {
    /**
     * the number of seconds items in the cache expire after
     */
    defaultSecondsUntilExpiration?: number | undefined;
    /**
     * a shorthand alias for `defaultSecondsUntilExpiration`
     *
     * note
     * - if both options are set, `defaultSecondsUntilExpirationInput` takes precedence
     */
    seconds?: number | undefined;
}) => SimpleInMemoryCache<T>;
